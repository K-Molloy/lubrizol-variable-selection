flesh_model = lm(BMI~., data = flesh_data)
step_flesh = step(flesh_model, direction = "both", trace = FALSE)
summary(step_flesh)
test = lm(formula = BMI ~ Chest.girth + Waist.girth + Thigh.girth + Bicep + Forearm + Calf + Ankle + Wrist, data = flesh_data)
summary(test)
knitr::opts_chunk$set(echo = TRUE)
body = read.csv("Body dimension data.csv")
body$BMI = body$Weight/(body$Height/100)^2
body$bitro_hip = body$Hip.girth - body$Bitrochanteric
names(body)
attach(body)
body = read.csv("Body dimension data.csv")
body$BMI = body$Weight/(body$Height/100)^2
body$bitro_hip = body$Hip.girth - body$Bitrochanteric
names(body)
attach(body)
View(body)
plot(Waist.girthl, BMI)
plot(Waist.girth, BMI)
plot(Calf, BMI)
plot(Calf, BMI, color= Gender)
plot(Calf, BMI, colour= Gender)
plot(Calf, BMI, group= Gender)
plot(Calf, BMI)
plot(Knee.diameter, BMI)
flesh_model = lm(BMI~., data = flesh_data)
body = read.csv("Body dimension data.csv")
body$BMI = body$Weight/(body$Height/100)^2
body_tests = dplyr::select(body, -c(Weight, Height))
bone_data = dplyr::select(body_tests, c(Biacromial, pelvic.breadth, Bitrochanteric, Chest.Depth, Chest.diamete, Elbow.diameter, Wrist.diameter, Knee.diameter, Ankle.diameter, Age, BMI, Gender))
flesh_data = dplyr::select(body_tests, c(Shoulder.girth, Chest.girth, Waist.girth, Navel.girth, Hip.girth, Thigh.girth, Bicep, Forearm, Knee, Calf, Ankle, Wrist, Age, BMI, Gender))
attach(body_tests)
names(body_tests)
flesh_model = lm(BMI~., data = flesh_data)
step_flesh = step(flesh_model, direction = "both", trace = FALSE)
summary(step_flesh)
plot(Thigh.girth, BMI)
plot(Knee.diameter, BMI)
typeof(body$Gender)
body$Gender
res1 = residuals(step_model)
full_model = lm(BMI~ ., data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
res1 = residuals(step_model)
fit = fitted(step_model)
plot(fit, res1)
library(MASS)
boxcox(step_model)
body_tests$BMI = log(body_tests$BMI)
full_model = lm(BMI~ ., data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
library(MASS)
boxcox(step_model)
body_tests$BMI = log(body_tests$BMI)
full_model = lm(BMI~ ., data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(BMI~ ., data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
library(MASS)
boxcox(step_model)
library(MASS)
boxcox(step_model)
body = read.csv("Body dimension data.csv")
body$BMI = body$Weight/(body$Height/100)^2
body_tests = dplyr::select(body, -c(Weight, Height))
bone_data = dplyr::select(body_tests, c(Biacromial, pelvic.breadth, Bitrochanteric, Chest.Depth, Chest.diamete, Elbow.diameter, Wrist.diameter, Knee.diameter, Ankle.diameter, Age, BMI, Gender))
flesh_data = dplyr::select(body_tests, c(Shoulder.girth, Chest.girth, Waist.girth, Navel.girth, Hip.girth, Thigh.girth, Bicep, Forearm, Knee, Calf, Ankle, Wrist, Age, BMI, Gender))
attach(body_tests)
names(body_tests)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(BMI~ ., data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
library(MASS)
boxcox(step_model)
library(MASS)
boxcox(step_flesh)
library(MASS)
boxcox(step_model)
plot(step_model)
plot(predict(step_model), body_tests$BMI)
plot(predict(step_model), body_tests$BMI)
abline(a=0, b=1)
knitr::opts_chunk$set(echo = TRUE)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ ., data = body_tests)
body = read.csv("Body dimension data.csv")
body$BMI = body$Weight/(body$Height/100)^2
body_tests = dplyr::select(body, -c(Weight, Height))
bone_data = dplyr::select(body_tests, c(Biacromial, pelvic.breadth, Bitrochanteric, Chest.Depth, Chest.diamete, Elbow.diameter, Wrist.diameter, Knee.diameter, Ankle.diameter, Age, BMI, Gender))
flesh_data = dplyr::select(body_tests, c(Shoulder.girth, Chest.girth, Waist.girth, Navel.girth, Hip.girth, Thigh.girth, Bicep, Forearm, Knee, Calf, Ankle, Wrist, Age, BMI, Gender))
attach(body_tests)
names(body_tests)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ ., data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
res1 = residuals(step_model)
fit = fitted(step_model)
plot(fit, res1) # no pattern indicates good fit
library(MASS)
boxcox(step_model)
plot(step_model)
plot(predict(step_model), body_tests$BMI)
abline(a=0, b=1)
plot(predict(step_model), log(body_tests$BMI))
abline(a=0, b=1)
knitr::opts_chunk$set(echo = TRUE)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(BMI~ ., data = body_tests)
body = read.csv("Body dimension data.csv")
body$BMI = body$Weight/(body$Height/100)^2
body_tests = dplyr::select(body, -c(Weight, Height))
bone_data = dplyr::select(body_tests, c(Biacromial, pelvic.breadth, Bitrochanteric, Chest.Depth, Chest.diamete, Elbow.diameter, Wrist.diameter, Knee.diameter, Ankle.diameter, Age, BMI, Gender))
flesh_data = dplyr::select(body_tests, c(Shoulder.girth, Chest.girth, Waist.girth, Navel.girth, Hip.girth, Thigh.girth, Bicep, Forearm, Knee, Calf, Ankle, Wrist, Age, BMI, Gender))
attach(body_tests)
names(body_tests)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(BMI~ ., data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ ., data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
body = read.csv("Body dimension data.csv")
body$BMI = body$Weight/(body$Height/100)^2
body_tests = dplyr::select(body, -c(Weight, Height))
bone_data = dplyr::select(body_tests, c(Biacromial, pelvic.breadth, Bitrochanteric, Chest.Depth, Chest.diamete, Elbow.diameter, Wrist.diameter, Knee.diameter, Ankle.diameter, Age, BMI, Gender))
flesh_data = dplyr::select(body_tests, c(Shoulder.girth, Chest.girth, Waist.girth, Navel.girth, Hip.girth, Thigh.girth, Bicep, Forearm, Knee, Calf, Ankle, Wrist, Age, BMI, Gender))
attach(body_tests)
names(body_tests)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . + Gender:pelvic.breadth, data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . + Gender:pelvic.breadth, data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . + Gender:Hip.girth, data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . + , data = body_tests)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . + Hip.girth, data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . + Hip.girth:Gender, data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
res1 = residuals(step_model)
fit = fitted(step_model)
plot(fit, res1) # no pattern indicates good fit
library(MASS)
boxcox(step_model)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(BMI~ . + Hip.girth:Gender, data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
bone_model = lm(BMI~., data = bone_data)
step_bone = step(bone_model, direction = "both", trace = FALSE)
summary(step_bone)
res1 = residuals(step_model)
fit = fitted(step_model)
plot(fit, res1) # no pattern indicates good fit
library(MASS)
boxcox(step_model)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . + Hip.girth:Gender, data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
res1 = residuals(step_model)
fit = fitted(step_model)
plot(fit, res1) # no pattern indicates good fit
library(MASS)
boxcox(step_model)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(log(BMI))~ . + Hip.girth:Gender, data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
res1 = residuals(step_model)
fit = fitted(step_model)
plot(fit, res1) # no pattern indicates good fit
library(MASS)
boxcox(step_model)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
res1 = residuals(step_model)
fit = fitted(step_model)
plot(fit, res1) # no pattern indicates good fit
library(MASS)
boxcox(step_model)
plot(step_model)
knitr::opts_chunk$set(echo = TRUE)
boxplot(Hip.girth~Gender, data = body)
boxplot(pelvic.breadth~Gender, data = body)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
typeof(Gender)
body$Gender
boxplot(BMI~Gender, data = body)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . Gender:Waist.girth, data = body_tests)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . + Gender:Waist.girth, data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variation is included in the
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(BMI~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(BMI~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
library(MASS)
boxcox(step_model)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
library(MASS)
boxcox(step_model)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(BMI~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
plot(step_model)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
plot(step_model)
plot(predict(step_model), log(body_tests$BMI))
abline(a=0, b=1)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(BMI~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
library(MASS)
boxcox(step_model)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI)~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
res1 = residuals(step_model)
fit = fitted(step_model)
plot(fit, res1) # no pattern indicates good fit
coefficients( step_model)
knitr::opts_chunk$set(echo = TRUE)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI) ~ . , data = body_tests)
library(tidyverse)
body = read.csv("Body dimension data.csv")
body$BMI = body$Weight/(body$Height/100)^2
body_tests = dplyr::select(body, -c(Weight, Height))
attach(body_tests)
names(body_tests)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI) ~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI) ~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
final_model = update(step_model, -Ankle.diameter)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI) ~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
final_model = update(step_model -Ankle.diameter)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI) ~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
final_model = update(step_model, .~., -Ankle.diameter)
summary(final_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI) ~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
body = read.csv("Body dimension data.csv")
body$BMI = body$Weight/(body$Height/100)^2
body_tests = dplyr::select(body, -c(Weight, Height))
attach(body_tests)
names(body_tests)
library(tidyverse)
body = read.csv("Body dimension data.csv")
body$BMI = body$Weight/(body$Height/100)^2
body_tests = dplyr::select(body, -c(Weight, Height))
attach(body_tests)
names(body_tests)
#body_tests$BMI = log(body_tests$BMI)
full_model = lm(log(BMI) ~ . , data = body_tests)
step_model = step(full_model, direction = "both", trace = FALSE)
summary(step_model)
#note, gender is included as a factor in the models
#multiple r squared is how much of the variance is captured by the model
#adjusted r squared considers the independent variables and measures how well each one is correlated to the dependent variable
load("~/460 project/project_github/lubrizol-variable-selection/data/Data.csv")
setwd("~/460 project/project_github/lubrizol-variable-selection/pre-processing")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) #loading in packages
raw_data = read.csv("Data.csv") #reading in data
raw_data$LAB <- as.factor(raw_data$LAB)
no_ingredients = raw_data[, 477:811]
names(no_ingredients)
#names(no_ingredients)
raw_data[1,1]
#names(no_ingredients)
raw_data[1,2]
#names(no_ingredients)
raw_data[2,1]
#names(no_ingredients)
raw_data[3,1]
raw_data$LAB <- as.factor(raw_data$LAB)
no_ingredients = raw_data[, 478:811] #slicing the data set to get just groups, lab and response
names(no_ingredients) #verifying that slicing worked as intended
standardised_data = standardize(no_ingredients)
no_ingredients$pass_fail = filter(no_ingredients, Response >= 50)
no_ingredients$pass_fail = no_ingredients$Response >= 50
raw_data$pass = raw_data$Response >= 50 #creating boolean variable for if it passes test
raw_data$LAB <- as.factor(raw_data$LAB) #converting lab to factor
no_ingredients = raw_data[, 478:812] #slicing the data set to get just groups, lab and response
names(no_ingredients) #verifying that slicing worked as intended
raw_data$Pass = raw_data$Response >= 50 #creating boolean variable for if it passes test
raw_data$LAB <- as.factor(raw_data$LAB) #converting lab to factor
no_ingredients = raw_data[, 478:812] #slicing the data set to get just groups, lab and response
names(no_ingredients) #verifying that slicing worked as intended
library(tidyverse) #loading in packages
raw_data = read.csv("Data.csv") #reading in data
raw_data$Pass = raw_data$Response >= 50 #creating boolean variable for if it passes test
raw_data$LAB <- as.factor(raw_data$LAB) #converting lab to factor
no_ingredients = raw_data[, 478:812] #slicing the data set to get just groups, lab and response
names(no_ingredients) #verifying that slicing worked as intended
library(tidyverse) #loading in packages
raw_data = read.csv("Data.csv") #reading in data
raw_data$Pass = as.factor(raw_data$Response >= 50) #creating boolean variable for if it passes test
raw_data$LAB <- as.factor(raw_data$LAB) #converting lab to factor
no_ingredients = raw_data[, 478:812] #slicing the data set to get just groups, lab and response
names(no_ingredients) #verifying that slicing worked as intended
no_ingredients[,335]
raw_data$Pass = as.numeric(raw_data$Response >= 50) #creating boolean variable for if it passes test
raw_data$LAB <- as.factor(raw_data$LAB) #converting lab to factor
no_ingredients = raw_data[, 478:812] #slicing the data set to get just groups, lab and response
names(no_ingredients) #verifying that slicing worked as intended
no_ingredients[,335]
raw_data$Pass = as.factor(raw_data$Response >= 50) #creating numerical variable for if it passes test
raw_data$LAB <- as.factor(raw_data$LAB) #converting lab to factor
no_ingredients = raw_data[, 478:812] #slicing the data set to get just groups, lab and response
names(no_ingredients) #verifying that slicing worked as intended
no_ingredients[,335]
raw_data$Pass = as.numeric(raw_data$Response >= 50) #creating numerical variable for if it passes test
raw_data$LAB <- as.factor(raw_data$LAB) #converting lab to factor
no_ingredients = raw_data[, 478:812] #slicing the data set to get just groups, lab and response
names(no_ingredients) #verifying that slicing worked as intended
no_ingredients[,335]
standardisation = function(dataset){
standardised_data = dataset
for (i in 1: len(dataset[0])){
sig = sd(dataset[,i])
mu = mean(dataset[,i])
for (j in 1: len(dataset)){
standardised_data[j,i] = (dataset[j,i] - mu)/sig
}
}
return(standardised_data)
}
standard_no_ingredients = standardisation(no_ingredients[,1:332])
no_ingredients[,335] #used to check if the Pass variable was implemented correctly
dim(no_ingredients)
standardisation = function(dataset){
standardised_data = dataset
for (i in 1: dim(dataset)[2]){
sig = sd(dataset[,i])
mu = mean(dataset[,i])
for (j in 1: dim(dataset)[1]){
standardised_data[j,i] = (dataset[j,i] - mu)/sig
}
}
return(standardised_data)
}
standard_no_ingredients = standardisation(no_ingredients[,1:332])
standard_no_ingredients = scale(no_ingredients[,1:332])
View(standard_no_ingredients)
View(standard_no_ingredients)
standard_no_ingredients = data.frame(scale(no_ingredients[,1:332]))
no_ingredients[,335] #used to check if the Pass variable was implemented correctly
View(standard_no_ingredients)
library(tidyverse) #loading in packages
raw_data = read.csv("Data.csv") #reading in data
raw_data$Pass = as.numeric(raw_data$Response >= 50) #creating numerical variable for if it passes test
raw_data$LAB <- as.factor(raw_data$LAB) #converting lab to factor
no_ingredients = raw_data[, 478:812] #slicing the data set to get just groups, lab and response
names(no_ingredients) #verifying that slicing worked as intended
no_ingredients[,335] #used to check if the Pass variable was implemented correctly
standardised_no_ingredients = data.frame(scale(no_ingredients[,1:332]))
standardised_no_ingredients$LAB = no_ingredients$LAB
standardised_no_ingredients$Response = no_ingredients$Response
standardised_no_ingredients$Pass = no_ingredients$Pass
write.csv(standardised_no_ingredients, "standardised_data_460.csv")
library(tidyverse) #loading in packages
raw_data = read.csv("Data.csv") #reading in data
raw_data$Pass = as.numeric(raw_data$Response >= 50) #creating numerical variable for if it passes test
raw_data[is.na(raw_data)] <- 0 #changes missing values to 0
raw_data$LAB <- as.factor(raw_data$LAB) #converting lab to factor
no_ingredients = raw_data[, 478:812] #slicing the data set to get just groups, lab and response
names(no_ingredients) #verifying that slicing worked as intended
standardised_no_ingredients = data.frame(scale(no_ingredients[,1:332])) #standardising data.
standardised_no_ingredients$LAB = no_ingredients$LAB
standardised_no_ingredients$Response = no_ingredients$Response
standardised_no_ingredients$Pass = no_ingredients$Pass
write.csv(standardised_no_ingredients, "standardised_data_460.csv")
ggplot(standardised_no_ingredients, aes(x= Group1_11, y = Response))+
geom_point()
ggplot(standardised_no_ingredients, aes(x= Group1_11, y = Response))+
geom_point(alpha = 0.1)
ggplot(standardised_no_ingredients, aes(x= Group1_11, y = Response))+
geom_point(alpha = 0.1)+
geom_hline(yintercept = 50)
ggplot(standardised_no_ingredients, aes(x= Group1_11, y = Response))+
geom_point(alpha = 0.1)+
geom_hline(yintercept = 50, color = "red", linetype = "dashed")
install.packages(BBmisc)
install.packages("BBmisc")
library(BBmisc) #loading in package with a normalisation function
normalised_no_ingredients = normalize(no_ingredients[,1:332], method = "range")
normalised_no_ingredients$LAB = no_ingredients$LAB
normalised_no_ingredients$Response = no_ingredients$Response
normalised_no_ingredients$Pass = no_ingredients$Pass
ggplot(normalised_no_ingredients, aes(x= Group1_11, y = Response))+
geom_point(alpha = 0.1)+
geom_hline(yintercept = 50, color = "red", linetype = "dashed")
